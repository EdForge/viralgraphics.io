/**
 * Created by w1 on 8/7/2015.
 */

/*
 So timeline would be
 A) Finish All Material Stuff
    mostly done
 B) Move tracer2 and view3d to new Material System
    todo
 C) Write Samples for Materials for me
    Run this app to view effects of illum 0 to illum 7 on sphere
        0. neon, require Kd, optional map_Kd
        1. diffuse, require Kd, Ka, optional map_Kd, map_Ka
        2. specular, (1) and require Ks, Ns, optional map_Ks
        3. reflection, (2) and require refl (environment map)
        4. dissolve, (3) and require d (alpha value)
            alpha <- d, reflection <- 1-d
        5. fresnel, (3) only, add fresnel reflection
        6. refraction, (4) and Ni, add refraction effects
        7. refraction + fresnel, (6) only, add fresnel effects

    Texture effects for various map is shown on the four cube
    from left to right.
        1. Kd set to green, map_Kd set to image, illum 0
            it's just filtered neon
        2. Kd set to green, map_Kd to image, illum 1
            it's what green filtered image look like
        3. Ks set to green, map_Ks to image, illum 2
            this is specular component where reflection from
            each part of surface is not uniform, i.e.
            determined by image
        4. How the cube should look like without filter.
            and with constant specular reflection.
 D) Do Simple Visual Hockey Game Demo using canon.js for Physics
 E) Start with Half Edge Format and also Scale / Rotate / Move Tools etc
 */


function recursivePrintMesh(mesh, level){
    var padding = "";
    for(var i=0; i<level; i++){
        padding += "  ";
    }
    console.log(padding + (typeof mesh));
    for(var i=0; i < mesh.children.length; i++){
        recursivePrintMesh(mesh.children[i], level + 1);
    }
}

MtlLoaderDemo = function(){
    VG.UI.RenderWidget.call(this);

    this.viewPort = new VG.Render.Camera(60, this.rect.width/this.rect.height,0.1, 1000);
    this.viewPort.position = new VG.Math.Vector3(1, -4, 10);
    this.viewPort.setLookAt(new VG.Math.Vector3(0, 0, 0), new VG.Math.Vector3(0, 0, 1));

    this.context = new VG.Render.Context();
    this.context.camera = this.viewPort;

    this.pipeline = new VG.Render.Pipeline();
    this.scene = new VG.Render.SceneManager();

    files['sample.mtl'] = [
        "newmtl textureTest",
        "Ka 1.0 1.0 0.0",
        "Kd 1.0 1.0 0.0",
        "Ks 1.0 1.0 1.0",
        "Ns 50.0",
        "map_Ka cube_nx.png",
        "map_Kd cube_ny.png",
        "map_Ks cube_nz.png",
        "illum 2",


        "newmtl reflTest",
        "Ka 0.0000 0.0000 0.0000", // glass should have Ka = 0
        "Kd 0.0000 0.0000 0.0000", // the color of glass,
        //"Ks 0.3000 0.3000 0.3000", // slightly reflect
        "Ks 0.0000 0.0000 0.0000", // no reflect
        "Ns 100.0",
        //"refl -type sphere sky-sphere.png", // sphere will be ignored
        "refl -type cube_top cube_nx.png",
        "refl -type cube_bottom cube_px.png",
        "refl -type cube_front cube_py.png",
        "refl -type cube_back cube_ny.png",
        "refl -type cube_left cube_nz.png",
        "refl -type cube_right cube_pz.png",
        "illum 7",
        "d 0.5",
        "Ni 2.0",


        "newmtl fresnelTest",//illum 5 & 7
        "",


    /** This is a bright green material.  When applied to an object, it will
     remain bright green regardless of any lighting in the scene.
     */
        "newmtl neon_green",
        "Kd 0.0000 1.0000 0.0000",
        "illum 0",

    /** This is a flat green material. */
        "newmtl flat_green",
        "Ka 0.0000 1.0000 0.0000",
        "Kd 0.0000 1.0000 0.0000",
        "illum 1",

    /** This is a flat green, partially dissolved material. */
        "newmtl diss_green",
        "Ka 0.0000 1.0000 0.0000",
        "Kd 0.0000 1.0000 0.0000",
        "d 0.8000",
        "illum 1",

    /** This is a shiny green material.  When applied to an object, it shows a
     white specular highlight. */
        "newmtl shiny_green",
        "Ka 0.0000 1.0000 0.0000",
        "Kd 0.0000 1.0000 0.0000",
        "Ks 1.0000 1.0000 1.0000",
        "Ns 200.0000",
        "illum 2",

    /** This is a reflective green material.  When applied to an object, it
     reflects other objects in the same scene.*/
        "newmtl green_mirror",
        "Ka 0.0000 1.0000 0.0000",
        "Kd 0.0000 1.0000 0.0000",
        "Ks 0.0000 1.0000 0.0000",
        "Ns 200.0000",
        "illum 3",

        "newmtl neon_red",
        "Kd 1.0000 0.0000 0.0000",
        "illum 0",

        "newmtl shiny_yellow",
        "Ka 1.0000 1.0000 0.0000",
        "Kd 1.0000 1.0000 0.0000",
        "Ks 1.0000 1.0000 1.0000",
        "Ns 200.0000",
        "illum 2",

    ].join('\n');

    files['asteroid.mtl'] = [
        "newmtl asteroid_rock",
        "Ns 0",
        "Ka 0.000000 0.000000 0.000000",
        "Kd 0.8 0.8 0.8",
        "Ks 0.8 0.8 0.8",
        "d 1",
        "illum 2",
        "map_Kd asteroid.jpg",
    ].join('\n');

    var lights = [
        {
            name: 'L0',
            color:{
                ambient: new VG.Core.Color(20, 20, 20),
                diffuse: new VG.Core.Color(200, 200, 200),
                specular: new VG.Core.Color(255, 255, 255)
            },
            position: new VG.Math.Vector4(0, 1, 1, 0)
        }
    ];
    this.context.lights = lights;

    //var box = VG.Import.loadObj(files['cube1.obj'], files, 0.4);
    //box.position = new VG.Math.Vector3(1, 1, 1);
    //box.parent = this.scene;

    //var box2 = VG.Import.loadObj(files['cube2.obj'], files, 0.5);
    //box2.parent = this.scene;


    //var bricks = this.addBricks(this.scene, 2);
    //var brick = bricks[0];
    //brick.material = new VG.Render.MtlMaterial({
    //    'Ka':[0, 1, 0],
    //    'Kd':[0, 1, 0],
    //    'name': 'green',
    //    'illum': 1
    //});

    var reflectMtl = new VG.Render.MtlMaterial({
        Ka: [1, 1, 0],
        Kd: [1, 1, 0],
        Ks: [1, 1, 1],
        Ns: 100,
        refl: {
            cube_top: {filename: 'cube_nx.png'},
            cube_bottom: {filename: 'cube_px.png'},
            cube_front: {filename: 'cube_py.png'},
            cube_back: {filename: 'cube_ny.png'},
            cube_left: {filename: 'cube_nz.png'},
            cube_right: {filename: 'cube_pz.png'}
        },
        illum: 3
    });

    var cube = VG.Import.loadObj(files['cube-textures.obj'], files, 0.5);
    cube.parent = this.scene;

    var cube0 = cube.clone();
    cube0.children[0].material = new VG.Render.MtlMaterial({
        Kd: [0, 1, 0],
        illum: 0,
        map_Kd: {filename: 'cube_nx.png'}
    });
    cube0.position = new VG.Math.Vector3(-2.1, 0, 0);
    cube0.parent = this.scene;

    var cube1 = cube.clone();
    cube1.children[0].material = new VG.Render.MtlMaterial({
        Ka: [0, 0, 0],
        Kd: [0, 1, 0],
        illum: 1,
        map_Kd: {filename: 'cube_nx.png'}
    });
    cube1.position = new VG.Math.Vector3(-1.5, 0, 0);
    cube1.parent = this.scene;

    var cube2 = cube.clone();
    cube2.children[0].material = new VG.Render.MtlMaterial({
        Ka: [0, 0, 0],
        Kd: [0, 0, 0],
        Ks: [0, 1, 0],
        Ns: 1,
        illum: 2,
        map_Ks: {filename: 'cube_nx.png'}
    });
    cube2.position = new VG.Math.Vector3(-0.9, 0, 0);
    cube2.parent = this.scene;

    var sphere = new VG.Render.SphereMesh(undefined, 64);
    sphere.setRadius(0.28);
    sphere.update();

    var spheres = [];
    for(var i = 0; i <= 7; i++) {
        var s = sphere.clone();
        s.position = new VG.Math.Vector3(-2+i*0.6, 1.5, 0);
        s.parent = this.scene;
        spheres.push(s);
    }
    spheres[0].material = new VG.Render.MtlMaterial({
        Kd: [1, 0, 0],
        illum: 0,
    });
    spheres[1].material = new VG.Render.MtlMaterial({
        Ka: [0, 0, 0],
        Kd: [1, 0, 0],
        illum: 1,
    });
    spheres[2].material = new VG.Render.MtlMaterial({
        Ka: [0, 0, 0],
        Kd: [0, 0, 0],
        Ks: [1, 0, 0],
        Ns: 10,
        illum: 2,
    });
    spheres[3].material = new VG.Render.MtlMaterial({
        Ka: [0, 0, 0],
        Kd: [0, 0, 0],
        Ks: [1, 0, 0],
        Ns: 10,
        refl: {
            cube_top: {filename: 'cube_nx.png'},
            cube_bottom: {filename: 'cube_px.png'},
            cube_front: {filename: 'cube_py.png'},
            cube_back: {filename: 'cube_ny.png'},
            cube_left: {filename: 'cube_nz.png'},
            cube_right: {filename: 'cube_pz.png'}
        },
        illum: 3,
    });
    spheres[4].material = new VG.Render.MtlMaterial({
        Ka: [0, 0, 0],
        Kd: [0, 0, 0],
        Ks: [1, 0, 0],
        Ns: 10,
        d: 0.3,
        refl: {
            cube_top: {filename: 'cube_nx.png'},
            cube_bottom: {filename: 'cube_px.png'},
            cube_front: {filename: 'cube_py.png'},
            cube_back: {filename: 'cube_ny.png'},
            cube_left: {filename: 'cube_nz.png'},
            cube_right: {filename: 'cube_pz.png'}
        },
        illum: 4,
    });
    spheres[5].material = new VG.Render.MtlMaterial({
        Ka: [0, 0, 0],
        Kd: [0, 0, 0],
        Ks: [1, 0, 0],
        Ns: 10,
        d: 0.3,
        refl: {
            cube_top: {filename: 'cube_nx.png'},
            cube_bottom: {filename: 'cube_px.png'},
            cube_front: {filename: 'cube_py.png'},
            cube_back: {filename: 'cube_ny.png'},
            cube_left: {filename: 'cube_nz.png'},
            cube_right: {filename: 'cube_pz.png'}
        },
        illum: 5,
    });
    spheres[6].material = new VG.Render.MtlMaterial({
        Ka: [0, 0, 0],
        Kd: [0, 0, 0],
        Ks: [1, 0, 0],
        Ns: 10,
        d: 0.3,
        Ni: 2,
        refl: {
            cube_top: {filename: 'cube_nx.png'},
            cube_bottom: {filename: 'cube_px.png'},
            cube_front: {filename: 'cube_py.png'},
            cube_back: {filename: 'cube_ny.png'},
            cube_left: {filename: 'cube_nz.png'},
            cube_right: {filename: 'cube_pz.png'}
        },
        illum: 6,
    });
    spheres[7].material = new VG.Render.MtlMaterial({
        Ka: [0, 0, 0],
        Kd: [0, 0, 0],
        Ks: [1, 0, 0],
        Ns: 10,
        Ni: 2,
        d: 0.3,
        refl: {
            cube_top: {filename: 'cube_nx.png'},
            cube_bottom: {filename: 'cube_px.png'},
            cube_front: {filename: 'cube_py.png'},
            cube_back: {filename: 'cube_ny.png'},
            cube_left: {filename: 'cube_nz.png'},
            cube_right: {filename: 'cube_pz.png'}
        },
        illum: 7,
    });



    //var aste = VG.Import.loadObj(files['asteroid.obj'], files, 0.5);
    //aste.parent = this.scene;

    var that = this;
    var dTheta = 0.005;
    this.render = function(delta) {
        that.viewPort.aspect = that.rect.width / that.rect.height;
        that.viewPort.updateProjection();
        that.viewPort.rotate(dTheta * 0.5, dTheta);
        that.pipeline.drawScene(that.context, that.scene, delta);
    };
};

MtlLoaderDemo.prototype = Object.create(VG.UI.RenderWidget.prototype);

MtlLoaderDemo.prototype.addBricks = function (node, count) {
    /**
     * Add bricks to node.
     * Just demo utility
     * @type {MeshEditor}
     */
    var that = this;
    var bricks = [];
    function addBrickAt(x, y, vertical)
    {
        var brick = VG.Render.Mesh.makeBox(vertical ? 0.08 : 0.5, vertical ? 0.5 : 0.08, 0.2);

        brick.position.set(x, y, 0.0);

        brick.parent = node;

        /* Some meta data */
        brick.vertical = true;

        bricks.push(brick);
    }

    for(var i=0;i<count;i++) {
        for(var j=0;j<3;j++) {
            addBrickAt((i - count / 2)*0.5, j*1 -1, true);
        }
    }
    return bricks;
};


function vgMain(workspace)
{
    /**
     * boot function
     */
    var widget = new MtlLoaderDemo();
    workspace.layout = VG.UI.Layout(widget);
}

var files = {
    'cube1.obj' :[
        "mtllib sample.mtl",
        "v 0.000000 2.000000 2.000000",
        "v 0.000000 0.000000 2.000000",
        "v 2.000000 0.000000 2.000000",
        "v 2.000000 2.000000 2.000000",
        "v 0.000000 2.000000 0.000000",
        "v 0.000000 0.000000 0.000000",
        "v 2.000000 0.000000 0.000000",
        "v 2.000000 2.000000 0.000000",
        "# 8 vertices",

        "g front cube",
        "usemtl unknown_material",
        "f 1 2 3 4",
        "g back cube",
        "usemtl flat_green",
        "f 8 7 6 5",
        "g right cube",
        "usemtl neon_green",
        "f 4 3 7 8",
        "g top cube",
        "usemtl shiny_green",
        "f 5 1 4 8",
        "g left cube",
        "usemtl diss_green",
        "f 5 6 2 1",
    ].join("\n"),
    'cube2.obj' : [
        "mtllib sample.mtl",
        "v 0.000000 2.000000 2.000000",
        "v 0.000000 0.000000 2.000000",
        "v 2.000000 0.000000 2.000000",
        "v 2.000000 2.000000 2.000000",
        "v 0.000000 2.000000 0.000000",
        "v 0.000000 0.000000 0.000000",
        "v 2.000000 0.000000 0.000000",
        "v 2.000000 2.000000 0.000000",
        "# 8 vertices",

        "g front cube",
        "f 1 2 3 4",
        "g back cube",
        "f 8 7 6 5",
        "g right cube",
        "usemtl flat_green",
        "f 4 3 7 8",
        "g top cube",
        "usemtl shiny_yellow",
        "f 5 1 4 8",
        "g bottom cube",
        "usemtl neon_red",
        "f 2 6 7 3",
        "# 6 elements"
    ].join("\n"),
    'cube3.obj' :[
        "v 0.000000 2.000000 2.000000",
        "v 0.000000 0.000000 2.000000",
        "v 2.000000 0.000000 2.000000",
        "v 2.000000 2.000000 2.000000",
        "v 0.000000 2.000000 0.000000",
        "v 0.000000 0.000000 0.000000",
        "v 2.000000 0.000000 0.000000",
        "v 2.000000 2.000000 0.000000",

        "f 1 2 3 4",
        "f 8 7 6 5",
        "f 4 3 7 8",
        "f 5 1 4 8",
        "f 5 6 2 1",
        "f 7 3 2 6",
    ].join("\n"),

    'asteroid.obj': [
        //"mtllib asteroid.mtl",
        "mtllib sample.mtl",
        "o Sphere",
        "v 0.000317 1.255835 -0.000460",
        "v 0.296554 1.101046 -0.068380",
        "v 0.350818 0.938378 0.091908",
        "v 0.597113 0.748474 -0.075610",
        "v 1.109780 0.120537 -0.000000",
        "v 0.822984 -0.568065 0.000000",
        "v 0.239315 -0.970942 0.000000",
        "v -0.009773 -1.139008 0.015165",
        "v 0.242118 -1.074288 -0.137984",
        "v 0.441707 -0.988802 -0.242736",
        "v 0.587166 -0.748511 -0.308168",
        "v 0.868153 -0.568065 -0.382460",
        "v 0.967353 -0.354605 -0.434524",
        "v 1.018437 -0.120537 -0.461335",
        "v 0.879000 0.120537 -0.461335",
        "v 0.827916 0.354605 -0.434524",
        "v 0.662706 0.568028 -0.458070",
        "v 0.587166 0.748511 -0.308169",
        "v 0.411492 0.885456 -0.215968",
        "v 0.244176 1.024881 -0.142294",
        "v 0.193185 1.101046 -0.265332",
        "v 0.263993 0.885456 -0.382460",
        "v 0.376697 0.748511 -0.545739",
        "v 0.467508 0.568065 -0.677302",
        "v 0.531150 0.354605 -0.769503",
        "v 0.563923 0.120537 -0.816983",
        "v 0.563923 -0.120537 -0.816983",
        "v 0.531150 -0.354605 -0.769503",
        "v 0.606945 -0.568065 -0.677302",
        "v 0.376697 -0.748511 -0.545739",
        "v 0.294208 -0.988802 -0.409228",
        "v 0.135947 -0.970942 -0.196953",
        "v 0.028846 -0.970942 -0.237571",
        "v 0.056016 -0.885456 -0.461335",
        "v 0.079931 -0.748511 -0.658288",
        "v 0.099200 -0.568065 -0.816983",
        "v 0.112704 -0.354605 -0.928199",
        "v 0.119658 -0.120537 -0.985471",
        "v 0.112697 0.086072 -0.839889",
        "v 0.105743 0.320140 -0.782617",
        "v 0.099200 0.568065 -0.816983",
        "v 0.079931 0.748511 -0.658288",
        "v 0.056016 0.885456 -0.461335",
        "v 0.086084 1.101046 -0.305950",
        "v -0.027624 1.101046 -0.292144",
        "v -0.148707 1.031706 -0.411219",
        "v -0.235147 0.748511 -0.620031",
        "v -0.298795 0.533600 -0.623921",
        "v -0.331561 0.354605 -0.874255",
        "v -0.418479 0.120537 -0.882325",
        "v -0.418479 -0.120537 -0.882325",
        "v -0.331561 -0.354605 -0.874255",
        "v -0.250046 -0.504788 -0.708963",
        "v -0.193358 -0.685234 -0.559490",
        "v -0.164793 -0.885456 -0.434524",
        "v -0.084862 -0.970942 -0.223764",
        "v -0.179130 -0.970942 -0.158695",
        "v -0.347850 -0.885456 -0.308168",
        "v -0.454566 -0.685234 -0.379191",
        "v -0.574224 -0.504788 -0.485199",
        "v -0.699870 -0.354605 -0.620031",
        "v -0.809513 -0.120537 -0.612414",
        "v -0.809513 0.120537 -0.612414",
        "v -0.699870 0.354605 -0.620031",
        "v -0.616012 0.568065 -0.545739",
        "v -0.496354 0.748511 -0.439732",
        "v -0.331764 1.031706 -0.284864",
        "v -0.163044 1.203156 -0.135391",
        "v -0.232362 1.180973 -0.057272",
        "v -0.451219 1.009522 -0.111216",
        "v -0.643854 0.748511 -0.158696",
        "v -0.917637 0.628486 -0.290053",
        "v -1.026414 0.415026 -0.223764",
        "v -0.878709 0.120537 -0.237571",
        "v -0.878709 -0.120537 -0.237571",
        "v -0.907846 -0.354605 -0.223764",
        "v -0.799070 -0.568065 -0.196953",
        "v -0.643853 -0.748511 -0.158696",
        "v -0.422990 -0.813186 -0.111215",
        "v -0.204133 -0.898672 -0.057272",
        "v -0.232361 -0.970942 0.057272",
        "v -0.422990 -0.813186 0.111216",
        "v -0.697084 -0.750309 0.238998",
        "v -0.852300 -0.569863 0.277255",
        "v -0.812495 -0.319098 0.143199",
        "v -0.878709 -0.120537 0.237571",
        "v -0.878709 0.120537 0.237571",
        "v -0.907846 0.354605 0.223764",
        "v -0.917637 0.628486 0.103853",
        "v -0.643854 0.748511 0.158696",
        "v -0.451219 0.885456 0.111215",
        "v -0.232362 1.180973 0.057272",
        "v -0.227905 1.120137 0.229358",
        "v -0.347850 0.885456 0.308168",
        "v -0.496355 0.748511 0.439732",
        "v -0.616012 0.568065 0.545739",
        "v -0.699870 0.354605 0.620030",
        "v -0.743053 0.120537 0.658288",
        "v -0.647702 -0.085029 0.577722",
        "v -0.607843 -0.259373 0.679487",
        "v -0.691716 -0.522164 0.579247",
        "v -0.549585 -0.750309 0.520034",
        "v -0.347850 -0.885456 0.308168",
        "v -0.179130 -0.970942 0.158696",
        "v -0.084862 -0.970942 0.223764",
        "v -0.164793 -0.885456 0.434524",
        "v -0.403914 -0.778650 0.682687",
        "v -0.460601 -0.598204 0.832160",
        "v -0.331561 -0.354605 0.874255",
        "v -0.256668 -0.085029 0.847633",
        "v -0.352019 0.120537 0.928199",
        "v -0.313392 0.277789 0.724615",
        "v -0.273665 0.491249 0.619863",
        "v -0.235147 0.748511 0.620030",
        "v -0.172823 1.009403 0.500657",
        "v -0.133637 1.120137 0.294427",
        "v 0.028846 1.180973 0.237571",
        "v 0.047986 1.009403 0.527468",
        "v 0.079931 0.748511 0.658288",
        "v 0.117369 0.491249 0.667343",
        "v 0.130873 0.277789 0.778559",
        "v 0.119658 0.120537 0.985471",
        "v 0.119658 -0.120537 0.985471",
        "v 0.111766 -0.350520 0.920473",
        "v 0.098262 -0.563980 0.809258",
        "v 0.042417 -0.744955 0.639197",
        "v 0.056016 -0.885456 0.461335",
        "v 0.024360 -0.954771 0.249843",
        "v 0.131460 -0.954771 0.209225",
        "v 0.246732 -0.812519 0.361050",
        "v 0.376697 -0.748511 0.545739",
        "v 0.467508 -0.568065 0.677303",
        "v 0.648221 -0.354605 0.769503",
        "v 0.680994 -0.120537 0.816983",
        "v 0.680994 0.120537 0.816983",
        "v 0.531150 0.354605 0.769503",
        "v 0.467508 0.568065 0.677302",
        "v 0.376697 0.748511 0.545739",
        "v 0.297744 0.941935 0.437767",
        "v 0.135947 1.180973 0.196953",
        "v 0.211903 1.180973 0.111215",
        "v 0.363597 0.938414 0.383486",
        "v 0.587166 0.748511 0.308169",
        "v 0.612858 0.507257 0.353903",
        "v 0.712057 0.293798 0.405967",
        "v 0.880212 0.059729 0.432778",
        "v 0.879000 -0.120537 0.461335",
        "v 0.944987 -0.354605 0.434524",
        "v 0.728716 -0.568065 0.382460",
        "v 0.587166 -0.748511 0.308169",
        "v 0.394231 -0.812519 0.194558",
        "v 0.211903 -0.970942 0.111215",
        "v 0.464723 -0.885456 0.000000",
        "v 0.663123 -0.748511 0.000000",
        "v 1.052087 -0.354605 0.000000",
        "v 1.109780 -0.120537 0.000000",
        "v 0.819158 0.293798 -0.028556",
        "v 0.707125 0.507257 -0.028557",
        "",
        "",
        "vn 0.000317 1.255835 -0.000460",
        "vn 0.296554 1.101046 -0.068380",
        "vn 0.350818 0.938378 0.091908",
        "vn 0.597113 0.748474 -0.075610",
        "vn 1.109780 0.120537 -0.000000",
        "vn 0.822984 -0.568065 0.000000",
        "vn 0.239315 -0.970942 0.000000",
        "vn -0.009773 -1.139008 0.015165",
        "vn 0.242118 -1.074288 -0.137984",
        "vn 0.441707 -0.988802 -0.242736",
        "vn 0.587166 -0.748511 -0.308168",
        "vn 0.868153 -0.568065 -0.382460",
        "vn 0.967353 -0.354605 -0.434524",
        "vn 1.018437 -0.120537 -0.461335",
        "vn 0.879000 0.120537 -0.461335",
        "vn 0.827916 0.354605 -0.434524",
        "vn 0.662706 0.568028 -0.458070",
        "vn 0.587166 0.748511 -0.308169",
        "vn 0.411492 0.885456 -0.215968",
        "vn 0.244176 1.024881 -0.142294",
        "vn 0.193185 1.101046 -0.265332",
        "vn 0.263993 0.885456 -0.382460",
        "vn 0.376697 0.748511 -0.545739",
        "vn 0.467508 0.568065 -0.677302",
        "vn 0.531150 0.354605 -0.769503",
        "vn 0.563923 0.120537 -0.816983",
        "vn 0.563923 -0.120537 -0.816983",
        "vn 0.531150 -0.354605 -0.769503",
        "vn 0.606945 -0.568065 -0.677302",
        "vn 0.376697 -0.748511 -0.545739",
        "vn 0.294208 -0.988802 -0.409228",
        "vn 0.135947 -0.970942 -0.196953",
        "vn 0.028846 -0.970942 -0.237571",
        "vn 0.056016 -0.885456 -0.461335",
        "vn 0.079931 -0.748511 -0.658288",
        "vn 0.099200 -0.568065 -0.816983",
        "vn 0.112704 -0.354605 -0.928199",
        "vn 0.119658 -0.120537 -0.985471",
        "vn 0.112697 0.086072 -0.839889",
        "vn 0.105743 0.320140 -0.782617",
        "vn 0.099200 0.568065 -0.816983",
        "vn 0.079931 0.748511 -0.658288",
        "vn 0.056016 0.885456 -0.461335",
        "vn 0.086084 1.101046 -0.305950",
        "vn -0.027624 1.101046 -0.292144",
        "vn -0.148707 1.031706 -0.411219",
        "vn -0.235147 0.748511 -0.620031",
        "vn -0.298795 0.533600 -0.623921",
        "vn -0.331561 0.354605 -0.874255",
        "vn -0.418479 0.120537 -0.882325",
        "vn -0.418479 -0.120537 -0.882325",
        "vn -0.331561 -0.354605 -0.874255",
        "vn -0.250046 -0.504788 -0.708963",
        "vn -0.193358 -0.685234 -0.559490",
        "vn -0.164793 -0.885456 -0.434524",
        "vn -0.084862 -0.970942 -0.223764",
        "vn -0.179130 -0.970942 -0.158695",
        "vn -0.347850 -0.885456 -0.308168",
        "vn -0.454566 -0.685234 -0.379191",
        "vn -0.574224 -0.504788 -0.485199",
        "vn -0.699870 -0.354605 -0.620031",
        "vn -0.809513 -0.120537 -0.612414",
        "vn -0.809513 0.120537 -0.612414",
        "vn -0.699870 0.354605 -0.620031",
        "vn -0.616012 0.568065 -0.545739",
        "vn -0.496354 0.748511 -0.439732",
        "vn -0.331764 1.031706 -0.284864",
        "vn -0.163044 1.203156 -0.135391",
        "vn -0.232362 1.180973 -0.057272",
        "vn -0.451219 1.009522 -0.111216",
        "vn -0.643854 0.748511 -0.158696",
        "vn -0.917637 0.628486 -0.290053",
        "vn -1.026414 0.415026 -0.223764",
        "vn -0.878709 0.120537 -0.237571",
        "vn -0.878709 -0.120537 -0.237571",
        "vn -0.907846 -0.354605 -0.223764",
        "vn -0.799070 -0.568065 -0.196953",
        "vn -0.643853 -0.748511 -0.158696",
        "vn -0.422990 -0.813186 -0.111215",
        "vn -0.204133 -0.898672 -0.057272",
        "vn -0.232361 -0.970942 0.057272",
        "vn -0.422990 -0.813186 0.111216",
        "vn -0.697084 -0.750309 0.238998",
        "vn -0.852300 -0.569863 0.277255",
        "vn -0.812495 -0.319098 0.143199",
        "vn -0.878709 -0.120537 0.237571",
        "vn -0.878709 0.120537 0.237571",
        "vn -0.907846 0.354605 0.223764",
        "vn -0.917637 0.628486 0.103853",
        "vn -0.643854 0.748511 0.158696",
        "vn -0.451219 0.885456 0.111215",
        "vn -0.232362 1.180973 0.057272",
        "vn -0.227905 1.120137 0.229358",
        "vn -0.347850 0.885456 0.308168",
        "vn -0.496355 0.748511 0.439732",
        "vn -0.616012 0.568065 0.545739",
        "vn -0.699870 0.354605 0.620030",
        "vn -0.743053 0.120537 0.658288",
        "vn -0.647702 -0.085029 0.577722",
        "vn -0.607843 -0.259373 0.679487",
        "vn -0.691716 -0.522164 0.579247",
        "vn -0.549585 -0.750309 0.520034",
        "vn -0.347850 -0.885456 0.308168",
        "vn -0.179130 -0.970942 0.158696",
        "vn -0.084862 -0.970942 0.223764",
        "vn -0.164793 -0.885456 0.434524",
        "vn -0.403914 -0.778650 0.682687",
        "vn -0.460601 -0.598204 0.832160",
        "vn -0.331561 -0.354605 0.874255",
        "vn -0.256668 -0.085029 0.847633",
        "vn -0.352019 0.120537 0.928199",
        "vn -0.313392 0.277789 0.724615",
        "vn -0.273665 0.491249 0.619863",
        "vn -0.235147 0.748511 0.620030",
        "vn -0.172823 1.009403 0.500657",
        "vn -0.133637 1.120137 0.294427",
        "vn 0.028846 1.180973 0.237571",
        "vn 0.047986 1.009403 0.527468",
        "vn 0.079931 0.748511 0.658288",
        "vn 0.117369 0.491249 0.667343",
        "vn 0.130873 0.277789 0.778559",
        "vn 0.119658 0.120537 0.985471",
        "vn 0.119658 -0.120537 0.985471",
        "vn 0.111766 -0.350520 0.920473",
        "vn 0.098262 -0.563980 0.809258",
        "vn 0.042417 -0.744955 0.639197",
        "vn 0.056016 -0.885456 0.461335",
        "vn 0.024360 -0.954771 0.249843",
        "vn 0.131460 -0.954771 0.209225",
        "vn 0.246732 -0.812519 0.361050",
        "vn 0.376697 -0.748511 0.545739",
        "vn 0.467508 -0.568065 0.677303",
        "vn 0.648221 -0.354605 0.769503",
        "vn 0.680994 -0.120537 0.816983",
        "vn 0.680994 0.120537 0.816983",
        "vn 0.531150 0.354605 0.769503",
        "vn 0.467508 0.568065 0.677302",
        "vn 0.376697 0.748511 0.545739",
        "vn 0.297744 0.941935 0.437767",
        "vn 0.135947 1.180973 0.196953",
        "vn 0.211903 1.180973 0.111215",
        "vn 0.363597 0.938414 0.383486",
        "vn 0.587166 0.748511 0.308169",
        "vn 0.612858 0.507257 0.353903",
        "vn 0.712057 0.293798 0.405967",
        "vn 0.880212 0.059729 0.432778",
        "vn 0.879000 -0.120537 0.461335",
        "vn 0.944987 -0.354605 0.434524",
        "vn 0.728716 -0.568065 0.382460",
        "vn 0.587166 -0.748511 0.308169",
        "vn 0.394231 -0.812519 0.194558",
        "vn 0.211903 -0.970942 0.111215",
        "vn 0.464723 -0.885456 0.000000",
        "vn 0.663123 -0.748511 0.000000",
        "vn 1.052087 -0.354605 0.000000",
        "vn 1.109780 -0.120537 0.000000",
        "vn 0.819158 0.293798 -0.028556",
        "vn 0.707125 0.507257 -0.028557",
        "",
        "",
        "vt 0.961538 0.500000",
        "vt 1.000000 0.500000",
        "vt 0.965801 0.535474",
        "vt 0.923077 0.500000",
        "vt 0.930763 0.569291",
        "vt 0.884615 0.500000",
        "vt 0.894133 0.599716",
        "vt 0.846154 0.500000",
        "vt 0.855383 0.624923",
        "vt 0.807692 0.500000",
        "vt 0.814405 0.643083",
        "vt 0.769231 0.500000",
        "vt 0.771690 0.652629",
        "vt 0.730769 0.500000",
        "vt 0.728310 0.652629",
        "vt 0.692308 0.500000",
        "vt 0.685595 0.643083",
        "vt 0.653846 0.500000",
        "vt 0.644617 0.624923",
        "vt 0.615385 0.500000",
        "vt 0.605867 0.599716",
        "vt 0.576923 0.500000",
        "vt 0.569237 0.569291",
        "vt 0.538462 0.500000",
        "vt 0.534199 0.535474",
        "vt 0.500000 0.500000",
        "vt 0.522140 0.563105",
        "vt 0.546116 0.624923",
        "vt 0.574207 0.683751",
        "vt 0.609594 0.736851",
        "vt 0.656312 0.779496",
        "vt 0.716485 0.804355",
        "vt 0.783514 0.804355",
        "vt 0.843688 0.779496",
        "vt 0.890406 0.736851",
        "vt 0.925793 0.683751",
        "vt 0.953884 0.624923",
        "vt 0.977860 0.563105",
        "vt 0.995273 0.576351",
        "vt 0.989945 0.652629",
        "vt 0.983069 0.728719",
        "vt 0.972485 0.804355",
        "vt 0.951023 0.878643",
        "vt 0.875582 0.945673",
        "vt 0.624418 0.945673",
        "vt 0.548977 0.878643",
        "vt 0.527515 0.804355",
        "vt 0.516931 0.728719",
        "vt 0.510055 0.652629",
        "vt 0.504727 0.576351",
        "vt 0.486125 0.571835",
        "vt 0.470715 0.643083",
        "vt 0.451555 0.712880",
        "vt 0.424469 0.779496",
        "vt 0.380343 0.838650",
        "vt 0.475067 0.862749",
        "vt 0.457525 0.920242",
        "vt 0.359726 0.891359",
        "vt 0.791311 0.948852",
        "vt 0.875630 0.808707",
        "vt 0.789906 0.805528",
        "vt 0.879497 0.878643",
        "vt 0.988527 0.873618",
        "vt 0.985302 0.945400",
        "vt 1.075531 0.779496",
        "vt 1.119657 0.838650",
        "vt 1.048445 0.712880",
        "vt 1.029285 0.643083",
        "vt 1.013875 0.571834",
        "vt 0.013875 0.571834",
        "vt 0.000000 0.500000",
        "vt 0.029036 0.550729",
        "vt 0.029285 0.643083",
        "vt 0.059576 0.599716",
        "vt 0.048445 0.712880",
        "vt 0.093192 0.644926",
        "vt 0.075531 0.779496",
        "vt 0.131441 0.683751",
        "vt 0.119657 0.838650",
        "vt 0.175361 0.712880",
        "vt 0.197495 0.878643",
        "vt 0.224405 0.728719",
        "vt 0.302505 0.878643",
        "vt 0.275595 0.728719",
        "vt 0.324639 0.712880",
        "vt 0.368559 0.683751",
        "vt 0.406808 0.644926",
        "vt 0.440424 0.599716",
        "vt 0.470964 0.550729",
        "vt 0.462615 0.518240",
        "vt 0.424992 0.535474",
        "vt 0.386940 0.550729",
        "vt 0.348359 0.563105",
        "vt 0.309266 0.571835",
        "vt 0.269800 0.576351",
        "vt 0.230200 0.576351",
        "vt 0.190734 0.571835",
        "vt 0.151641 0.563105",
        "vt 0.113060 0.550729",
        "vt 0.075008 0.535474",
        "vt 0.037385 0.518240",
        "vt 0.037385 0.481760",
        "vt 0.075008 0.464526",
        "vt 0.113060 0.449271",
        "vt 0.151641 0.436895",
        "vt 0.190734 0.428166",
        "vt 0.230200 0.423649",
        "vt 0.269800 0.423649",
        "vt 0.309266 0.428166",
        "vt 0.348359 0.436895",
        "vt 0.386940 0.449271",
        "vt 0.424992 0.464526",
        "vt 0.462615 0.481760",
        "vt 0.470964 0.449271",
        "vt 0.440424 0.400284",
        "vt 0.406808 0.355074",
        "vt 0.368559 0.316249",
        "vt 0.324639 0.287120",
        "vt 0.275595 0.271281",
        "vt 0.224405 0.271281",
        "vt 0.175361 0.287120",
        "vt 0.131441 0.316249",
        "vt 0.093192 0.355074",
        "vt 0.059576 0.400284",
        "vt 0.029036 0.449271",
        "vt 0.013875 0.428166",
        "vt 0.029285 0.356917",
        "vt 0.048445 0.287120",
        "vt 0.075531 0.220504",
        "vt 0.119657 0.161350",
        "vt 0.197495 0.121357",
        "vt 0.302505 0.121357",
        "vt 0.380343 0.161350",
        "vt 0.424469 0.220504",
        "vt 0.451555 0.287120",
        "vt 0.470715 0.356917",
        "vt 0.486125 0.428165",
        "vt 0.504727 0.423649",
        "vt 0.510055 0.347371",
        "vt 0.516931 0.271281",
        "vt 0.527515 0.195645",
        "vt 0.548977 0.121357",
        "vt 0.359726 0.114999",
        "vt 0.426530 0.095652",
        "vt 0.432152 0.146788",
        "vt 0.659729 0.121357",
        "vt 0.699677 0.106098",
        "vt 0.686755 0.028895",
        "vt 0.624418 0.054326",
        "vt 0.989594 0.060322",
        "vt 0.991865 0.118117",
        "vt 0.951023 0.121357",
        "vt 0.949969 0.051783",
        "vt 1.119657 0.161350",
        "vt 1.075531 0.220504",
        "vt 0.972485 0.195645",
        "vt 1.048445 0.287120",
        "vt 0.983069 0.271281",
        "vt 1.029285 0.356917",
        "vt 0.989945 0.347371",
        "vt 1.013875 0.428166",
        "vt 0.995273 0.423649",
        "vt 0.977860 0.436895",
        "vt 0.953884 0.375077",
        "vt 0.925793 0.316249",
        "vt 0.890406 0.263149",
        "vt 0.843688 0.220504",
        "vt 0.875582 0.054326",
        "vt 0.783515 0.195645",
        "vt 0.717401 0.105189",
        "vt 0.782599 0.105189",
        "vt 0.716486 0.195645",
        "vt 0.656312 0.220504",
        "vt 0.609594 0.263149",
        "vt 0.574207 0.316249",
        "vt 0.546116 0.375077",
        "vt 0.522140 0.436895",
        "vt 0.534199 0.464526",
        "vt 0.569237 0.430709",
        "vt 0.605867 0.400284",
        "vt 0.644617 0.375077",
        "vt 0.685595 0.356917",
        "vt 0.728310 0.347371",
        "vt 0.771690 0.347371",
        "vt 0.814405 0.356917",
        "vt 0.855383 0.375077",
        "vt 0.894133 0.400284",
        "vt 0.930763 0.430709",
        "vt 0.965801 0.464526",
        //"usemtl asteroid_rock",
        "usemtl reflTest",
        "s off",
        "f 7/1/7 8/2/8 9/3/9",
        "f 153/4/153 7/1/7 9/3/9 10/5/10",
        "f 154/6/154 153/4/153 10/5/10 11/7/11",
        "f 6/8/6 154/6/154 11/7/11 12/9/12",
        "f 155/10/155 6/8/6 12/9/12 13/11/13",
        "f 156/12/156 155/10/155 13/11/13 14/13/14",
        "f 5/14/5 156/12/156 14/13/14 15/15/15",
        "f 157/16/157 5/14/5 15/15/15 16/17/16",
        "f 158/18/158 157/16/157 16/17/16 17/19/17",
        "f 4/20/4 158/18/158 17/19/17 18/21/18",
        "f 3/22/3 4/20/4 18/21/18 19/23/19",
        "f 2/24/2 3/22/3 19/23/19 20/25/20",
        "f 1/26/1 2/24/2 20/25/20",
        "f 1/26/1 20/25/20 21/27/21",
        "f 20/25/20 19/23/19 22/28/22 21/27/21",
        "f 19/23/19 18/21/18 23/29/23 22/28/22",
        "f 18/21/18 17/19/17 24/30/24 23/29/23",
        "f 17/19/17 16/17/16 25/31/25 24/30/24",
        "f 16/17/16 15/15/15 26/32/26 25/31/25",
        "f 15/15/15 14/13/14 27/33/27 26/32/26",
        "f 14/13/14 13/11/13 28/34/28 27/33/27",
        "f 13/11/13 12/9/12 29/35/29 28/34/28",
        "f 12/9/12 11/7/11 30/36/30 29/35/29",
        "f 11/7/11 10/5/10 31/37/31 30/36/30",
        "f 10/5/10 9/3/9 32/38/32 31/37/31",
        "f 9/3/9 8/2/8 32/38/32",
        "f 32/38/32 8/2/8 33/39/33",
        "f 31/37/31 32/38/32 33/39/33 34/40/34",
        "f 30/36/30 31/37/31 34/40/34 35/41/35",
        "f 29/35/29 30/36/30 35/41/35 36/42/36",
        "f 28/34/28 29/35/29 36/42/36 37/43/37",
        "f 27/33/27 28/34/28 37/43/37 38/44/38",
        "f 26/32/26 27/33/27 38/44/38 39/45/39",
        "f 25/31/25 26/32/26 39/45/39 40/46/40",
        "f 24/30/24 25/31/25 40/46/40 41/47/41",
        "f 23/29/23 24/30/24 41/47/41 42/48/42",
        "f 22/28/22 23/29/23 42/48/42 43/49/43",
        "f 21/27/21 22/28/22 43/49/43 44/50/44",
        "f 1/26/1 21/27/21 44/50/44",
        "f 1/26/1 44/50/44 45/51/45",
        "f 44/50/44 43/49/43 46/52/46 45/51/45",
        "f 43/49/43 42/48/42 47/53/47 46/52/46",
        "f 42/48/42 41/47/41 48/54/48 47/53/47",
        "f 41/47/41 40/46/40 49/55/49 48/54/48",
        "f 40/56/40 39/57/39 50/58/50 49/55/49",
        "f 39/59/39 38/44/38 51/60/51 50/61/50",
        "f 38/44/38 37/62/37 52/63/52 51/64/51",
        "f 37/43/37 36/42/36 53/65/53 52/66/52",
        "f 36/42/36 35/41/35 54/67/54 53/65/53",
        "f 35/41/35 34/40/34 55/68/55 54/67/54",
        "f 34/40/34 33/39/33 56/69/56 55/68/55",
        "f 33/39/33 8/2/8 56/69/56",
        "f 56/70/56 8/71/8 57/72/57",
        "f 55/73/55 56/70/56 57/72/57 58/74/58",
        "f 54/75/54 55/73/55 58/74/58 59/76/59",
        "f 53/77/53 54/75/54 59/76/59 60/78/60",
        "f 52/79/52 53/77/53 60/78/60 61/80/61",
        "f 51/81/51 52/79/52 61/80/61 62/82/62",
        "f 50/83/50 51/81/51 62/82/62 63/84/63",
        "f 49/55/49 50/83/50 63/84/63 64/85/64",
        "f 48/54/48 49/55/49 64/85/64 65/86/65",
        "f 47/53/47 48/54/48 65/86/65 66/87/66",
        "f 46/52/46 47/53/47 66/87/66 67/88/67",
        "f 45/51/45 46/52/46 67/88/67 68/89/68",
        "f 1/26/1 45/51/45 68/89/68",
        "f 1/26/1 68/89/68 69/90/69",
        "f 68/89/68 67/88/67 70/91/70 69/90/69",
        "f 67/88/67 66/87/66 71/92/71 70/91/70",
        "f 66/87/66 65/86/65 72/93/72 71/92/71",
        "f 65/86/65 64/85/64 73/94/73 72/93/72",
        "f 64/85/64 63/84/63 74/95/74 73/94/73",
        "f 63/84/63 62/82/62 75/96/75 74/95/74",
        "f 62/82/62 61/80/61 76/97/76 75/96/75",
        "f 61/80/61 60/78/60 77/98/77 76/97/76",
        "f 60/78/60 59/76/59 78/99/78 77/98/77",
        "f 59/76/59 58/74/58 79/100/79 78/99/78",
        "f 58/74/58 57/72/57 80/101/80 79/100/79",
        "f 57/72/57 8/71/8 80/101/80",
        "f 80/101/80 8/71/8 81/102/81",
        "f 79/100/79 80/101/80 81/102/81 82/103/82",
        "f 78/99/78 79/100/79 82/103/82 83/104/83",
        "f 77/98/77 78/99/78 83/104/83 84/105/84",
        "f 76/97/76 77/98/77 84/105/84 85/106/85",
        "f 75/96/75 76/97/76 85/106/85 86/107/86",
        "f 74/95/74 75/96/75 86/107/86 87/108/87",
        "f 73/94/73 74/95/74 87/108/87 88/109/88",
        "f 72/93/72 73/94/73 88/109/88 89/110/89",
        "f 71/92/71 72/93/72 89/110/89 90/111/90",
        "f 70/91/70 71/92/71 90/111/90 91/112/91",
        "f 69/90/69 70/91/70 91/112/91 92/113/92",
        "f 1/26/1 69/90/69 92/113/92",
        "f 1/26/1 92/113/92 93/114/93",
        "f 92/113/92 91/112/91 94/115/94 93/114/93",
        "f 91/112/91 90/111/90 95/116/95 94/115/94",
        "f 90/111/90 89/110/89 96/117/96 95/116/95",
        "f 89/110/89 88/109/88 97/118/97 96/117/96",
        "f 88/109/88 87/108/87 98/119/98 97/118/97",
        "f 87/108/87 86/107/86 99/120/99 98/119/98",
        "f 86/107/86 85/106/85 100/121/100 99/120/99",
        "f 85/106/85 84/105/84 101/122/101 100/121/100",
        "f 84/105/84 83/104/83 102/123/102 101/122/101",
        "f 83/104/83 82/103/82 103/124/103 102/123/102",
        "f 82/103/82 81/102/81 104/125/104 103/124/103",
        "f 81/102/81 8/71/8 104/125/104",
        "f 104/125/104 8/71/8 105/126/105",
        "f 103/124/103 104/125/104 105/126/105 106/127/106",
        "f 102/123/102 103/124/103 106/127/106 107/128/107",
        "f 101/122/101 102/123/102 107/128/107 108/129/108",
        "f 100/121/100 101/122/101 108/129/108 109/130/109",
        "f 99/120/99 100/121/100 109/130/109 110/131/110",
        "f 98/119/98 99/120/99 110/131/110 111/132/111",
        "f 97/118/97 98/119/98 111/132/111 112/133/112",
        "f 96/117/96 97/118/97 112/133/112 113/134/113",
        "f 95/116/95 96/117/96 113/134/113 114/135/114",
        "f 94/115/94 95/116/95 114/135/114 115/136/115",
        "f 93/114/93 94/115/94 115/136/115 116/137/116",
        "f 1/26/1 93/114/93 116/137/116",
        "f 1/26/1 116/137/116 117/138/117",
        "f 116/137/116 115/136/115 118/139/118 117/138/117",
        "f 115/136/115 114/135/114 119/140/119 118/139/118",
        "f 114/135/114 113/134/113 120/141/120 119/140/119",
        "f 113/134/113 112/133/112 121/142/121 120/141/120",
        "f 112/133/112 111/143/111 122/144/122 121/145/121",
        "f 111/146/111 110/147/110 123/148/123 122/149/122",
        "f 110/150/110 109/151/109 124/152/124 123/153/123",
        "f 109/154/109 108/155/108 125/156/125 124/152/124",
        "f 108/155/108 107/157/107 126/158/126 125/156/125",
        "f 107/157/107 106/159/106 127/160/127 126/158/126",
        "f 106/159/106 105/161/105 128/162/128 127/160/127",
        "f 105/161/105 8/2/8 128/162/128",
        "f 128/162/128 8/2/8 129/163/129",
        "f 127/160/127 128/162/128 129/163/129 130/164/130",
        "f 126/158/126 127/160/127 130/164/130 131/165/131",
        "f 125/156/125 126/158/126 131/165/131 132/166/132",
        "f 124/152/124 125/156/125 132/166/132 133/167/133",
        "f 123/168/123 124/152/124 133/167/133 134/169/134",
        "f 122/170/122 123/171/123 134/169/134 135/172/135",
        "f 121/142/121 122/149/122 135/172/135 136/173/136",
        "f 120/141/120 121/142/121 136/173/136 137/174/137",
        "f 119/140/119 120/141/120 137/174/137 138/175/138",
        "f 118/139/118 119/140/119 138/175/138 139/176/139",
        "f 117/138/117 118/139/118 139/176/139 140/177/140",
        "f 1/26/1 117/138/117 140/177/140",
        "f 1/26/1 140/177/140 141/178/141",
        "f 140/177/140 139/176/139 142/179/142 141/178/141",
        "f 139/176/139 138/175/138 143/180/143 142/179/142",
        "f 138/175/138 137/174/137 144/181/144 143/180/143",
        "f 137/174/137 136/173/136 145/182/145 144/181/144",
        "f 136/173/136 135/172/135 146/183/146 145/182/145",
        "f 135/172/135 134/169/134 147/184/147 146/183/146",
        "f 134/169/134 133/167/133 148/185/148 147/184/147",
        "f 133/167/133 132/166/132 149/186/149 148/185/148",
        "f 132/166/132 131/165/131 150/187/150 149/186/149",
        "f 131/165/131 130/164/130 151/188/151 150/187/150",
        "f 130/164/130 129/163/129 152/189/152 151/188/151",
        "f 129/163/129 8/2/8 152/189/152",
        "f 152/189/152 8/2/8 7/1/7",
        "f 151/188/151 152/189/152 7/1/7 153/4/153",
        "f 150/187/150 151/188/151 153/4/153 154/6/154",
        "f 149/186/149 150/187/150 154/6/154 6/8/6",
        "f 148/185/148 149/186/149 6/8/6 155/10/155",
        "f 147/184/147 148/185/148 155/10/155 156/12/156",
        "f 146/183/146 147/184/147 156/12/156 5/14/5",
        "f 145/182/145 146/183/146 5/14/5 157/16/157",
        "f 144/181/144 145/182/145 157/16/157 158/18/158",
        "f 143/180/143 144/181/144 158/18/158 4/20/4",
        "f 142/179/142 143/180/143 4/20/4 3/22/3",
        "f 141/178/141 142/179/142 3/22/3 2/24/2",
        "f 1/26/1 141/178/141 2/24/2"
    ].join('\n'),
    'cube-textures.obj' : [
        'mtllib cube-textures.mtl',
        '# v1 is origin: back lower left (bll)',
        '# v2=fll, v3=bul, v4=ful, v5=blr, v6=flr, v7=',
        'v  0.0  0.0  0.0',
        'v  0.0  0.0  1.0',
        'v  0.0  1.0  0.0',
        'v  0.0  1.0  1.0',
        'v  1.0  0.0  0.0',
        'v  1.0  0.0  1.0',
        'v  1.0  1.0  0.0',
        'v  1.0  1.0  1.0',
        '',
        'vn  0.0  0.0  1.0',
        'vn  0.0  0.0 -1.0',
        'vn  0.0  1.0  0.0',
        'vn  0.0 -1.0  0.0',
        'vn  1.0  0.0  0.0',
        'vn -1.0  0.0  0.0',
        '',
        'vt 0.0 0.0  # vt=1 is upper left of texture',
        'vt 0.0 1.0  # vt=2 is lower left of texture',
        'vt 1.0 0.0  # vt=3 is upper right of texture',
        'vt 1.0 1.0  # vt=4 is lower right of texture',
        '',
        '# remember, syntax is v/vt/vn',
        'usemtl texture',
        'f  1/4/2  7/1/2  5/2/2',
        'f  1/4/2  3/3/2  7/1/2',
        'f  1/2/6  4/3/6  3/1/6',
        'f  1/2/6  2/4/6  4/3/6',
        'f  3/1/3  8/4/3  7/3/3',
        'f  3/1/3  4/2/3  8/4/3',
        'f  5/4/5  7/3/5  8/1/5',
        'f  5/4/5  8/1/5  6/2/5',
        'f  1/2/4  5/4/4  6/3/4',
        'f  1/2/4  6/3/4  2/1/4',
        'f  2/2/1  6/4/1  8/3/1',
        'f  2/2/1  8/3/1  4/1/1',
    ].join('\n'),
    'cube-textures.mtl':[
        'newmtl texture',
        'illum 2',
        'Kd 1.0 1.0 1.0',
        'Ka 0.00 0.00 0.00',
        'Ks 1.00 1.00 1.00',
        'Tf 1.00 1.00 1.00',
        'Ns 10',
        'map_Kd cube/cube_nx.png',
    ].join('\n')
};

